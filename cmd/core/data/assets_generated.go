// Code generated by vfsgen; DO NOT EDIT.

// +build !gen

package data

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// Assets statically implements the virtual filesystem provided to vfsgen.
var Assets = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2019, 10, 31, 12, 7, 7, 126445573, time.UTC),
		},
		"/default-config.toml": &vfsgen۰CompressedFileInfo{
			name:             "default-config.toml",
			modTime:          time.Date(2019, 10, 31, 15, 55, 37, 319487791, time.UTC),
			uncompressedSize: 1181,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x54\xc1\x6e\xdb\x30\x0c\xbd\xfb\x2b\x08\xe7\xb2\x5d\xe2\x74\x2b\x86\x2c\x40\x8e\xc3\x7e\x60\xb7\xa2\x30\x64\x89\x8e\xd9\xc8\xa2\x26\x51\x49\xf3\xf7\x83\x24\xbb\xf5\x61\xd7\xc7\x47\xf2\xf1\x3d\xd9\x96\x2f\xbd\xc5\x1b\x5a\x38\x43\x4b\x6e\xe4\xb6\xc9\xd0\xc8\x61\x56\x92\x31\xc1\x77\x69\x61\x07\x9c\xc4\x27\x01\xcb\x17\x58\x8a\x5f\x1e\x9c\x40\x2b\x07\x29\x22\x64\x1a\x70\x80\xb7\xc8\xee\x6b\x73\x8f\xbd\xe7\x90\xfb\x7f\x1e\x0e\x87\x46\x4f\xa8\xaf\x7d\xf2\x46\x09\x46\x38\x83\x84\x84\x8d\x4a\xc2\xbd\xe1\xbb\xb3\xac\xcc\xa6\x38\x2a\x1b\x11\x60\x07\x34\x16\x22\x44\x0c\x37\xd2\x08\x77\xb2\x16\xd6\x06\xa8\x0d\xa0\x9c\x01\x7c\x27\x69\x9a\x17\xcd\x01\x5f\x1b\x00\x00\x32\x59\x79\x56\x4d\x06\x78\x04\x34\x17\x2c\x85\xe0\x75\x2f\x34\x23\xa7\x72\xdb\xd3\x9c\x39\x13\xdf\xc1\xb2\xbb\x40\x1e\x00\x71\xe2\x64\x0d\xdc\x15\x09\x04\x8c\x9e\x5d\x44\x18\x03\xcf\xa0\xd9\x39\xd4\xc2\x01\x06\x1c\x33\x35\xa0\xa4\xe0\x60\x1d\x88\x21\x70\x68\xca\x9e\xa2\x65\x6f\x86\x2a\xc7\x2b\x99\xf2\xba\x28\x1c\xd4\x25\xe3\x6d\xc1\xb5\x45\xe5\xfa\x28\xf9\x8e\xf5\xee\xdd\x2a\x80\x9c\x60\x70\xca\x42\xad\x0f\x58\xe9\x68\x80\x5d\xc6\x42\xb1\xdb\xb1\x6c\x37\x6a\xcb\xc9\xd4\xa5\x29\x94\x48\x27\x11\x1f\x4f\x5d\x17\x95\x33\x03\xbf\xef\x03\x5d\x26\x41\x3d\xed\x89\x3b\xe5\xa9\xbb\x3d\x55\x2d\x3b\x28\xbd\xf0\x76\x17\x50\x5a\x63\x8c\x20\x7c\x45\xb7\x14\x67\x72\x34\x67\x31\x9a\xfd\x87\x47\x43\x35\x75\xb7\x70\x7e\xff\xfa\x03\x33\x1b\xb4\xb1\x3b\x91\xd9\x80\x3c\xbc\xa1\x96\x4f\xb4\x0c\x2e\x09\x6d\xb5\xcf\x7f\x45\x5e\x97\x2e\x1a\x41\x63\x90\x7e\x24\x5b\x23\xbe\xe2\xa3\x2f\x36\xfa\xc0\x37\x32\x68\x6a\x58\xe5\x49\x0c\x58\x5f\xa0\x8d\x6b\x44\xc4\xab\x6e\x72\x20\x13\x45\xd0\x2a\x22\xcc\xea\x8a\x10\x53\x40\x78\x70\x0a\xc5\xa1\x6a\xe4\x9d\x64\xca\xfd\xa7\xae\xdb\x7a\x57\x91\xff\x38\x77\x3a\x1e\x8f\xdf\x97\x0c\x3f\x64\x2e\x2f\x2e\x9f\x51\x50\x1a\x49\xe7\xe4\x4a\x31\x6b\x2f\xfc\x8f\x43\xb6\xf4\x2b\x3e\x36\xb4\xe6\x65\x66\x33\xa4\x58\xcd\xc8\x8e\x16\x31\xda\x67\x7e\x90\x54\x0c\x51\x51\x13\x81\xb2\x91\x21\x26\x9f\x3f\x36\xac\xe6\x2a\x63\x42\xe6\x5b\xd6\xca\x4e\x1c\xe5\x74\x3c\x1c\x0e\xed\xe2\xea\x32\x2d\x4f\xe1\xb0\x0c\x91\x09\x03\x02\xc5\xcf\x58\x57\x1d\xec\x75\x52\x55\x06\x3a\xe3\x99\x5c\xf9\x6c\xd8\xeb\xbd\x68\x7f\xea\xba\xcf\x25\xcf\xc7\xe7\x43\xdb\x34\x2f\xd1\xcd\xbe\x76\x64\xb8\xfc\x05\xce\x1b\x2d\x4f\x3f\x96\xf7\x76\xc3\x10\x89\xdd\xb9\xfd\xa6\x17\x23\x79\x9e\x93\x23\x79\x9c\xa1\xf5\x69\xb0\xa4\xdb\xe6\x5f\x00\x00\x00\xff\xff\x83\x18\xa8\x68\x9d\x04\x00\x00"),
		},
		"/min-config.toml": &vfsgen۰CompressedFileInfo{
			name:             "min-config.toml",
			modTime:          time.Date(2019, 10, 31, 15, 56, 51, 867412398, time.UTC),
			uncompressedSize: 277,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8e\x41\x6e\x83\x30\x10\x45\xf7\x9c\xe2\x0b\xf6\xed\xbe\x52\x97\x55\x2f\xd0\x5d\x15\x21\x33\x1e\x82\xc1\x66\x08\x1e\x14\x71\xfb\x88\x81\x28\x64\xe7\xf9\xef\xc9\x7a\xff\x24\x33\x5f\x0a\x00\x08\x1e\xdf\x28\x4b\x54\xdb\x4b\x5a\xb0\xbf\x72\x61\xc4\xa4\x0f\x8a\xb2\xf8\x5d\xad\x60\x07\xfa\xbb\xc2\x11\x71\xce\x50\x19\x78\x3c\x60\x0a\x63\x48\x2e\x22\x93\x4c\x8c\xdc\xc9\x12\x3d\x1a\xde\xe9\xe1\xfc\xfe\xfc\x21\x89\xe7\x98\x3f\xbf\x82\x3f\x8d\xd2\xf4\x4c\xfa\x5a\xed\x63\x2b\x3b\xc7\xa4\x9b\xea\xde\x42\x3c\x6b\xdd\x86\xc8\xcf\xfa\x0d\xd9\x1a\xda\x40\x4e\x19\x06\x27\xa7\x9d\xf9\x03\xaf\xf5\x76\xbc\xe9\x03\xaf\x27\xed\x11\x00\x00\xff\xff\x82\x50\x5c\x86\x15\x01\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/default-config.toml"].(os.FileInfo),
		fs["/min-config.toml"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
