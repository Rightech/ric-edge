// Code generated by vfsgen; DO NOT EDIT.

// +build !gen

package data

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// Assets statically implements the virtual filesystem provided to vfsgen.
var Assets = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2019, 10, 30, 13, 5, 33, 94095869, time.UTC),
		},
		"/default-config.toml": &vfsgen۰CompressedFileInfo{
			name:             "default-config.toml",
			modTime:          time.Date(2019, 10, 30, 15, 1, 14, 3431876, time.UTC),
			uncompressedSize: 989,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x53\xc1\x8e\xdb\x3a\x0c\xbc\xfb\x2b\x08\xe7\xf2\xde\x25\x4e\xda\x45\x91\x06\xc8\x97\x2c\x8a\x40\x96\xe8\x58\x1b\x59\x54\x49\x2a\xd9\xfc\x7d\x21\xc9\xd9\x06\xbd\x0e\x47\x33\xc3\x31\x1d\xe8\x72\x0e\x78\xc3\x00\x27\xe8\x7d\x9c\xa8\xef\x0a\x34\x11\x2f\x46\x0b\xa6\xf8\xa9\x3d\x6c\x80\xb2\xa6\xac\x10\xe8\x02\xeb\xf0\xbf\x07\x65\xb0\x26\x42\x16\x84\x42\x03\x62\xf8\x10\x8a\xff\x77\x77\x39\x27\xe2\xf2\xfe\xe7\x6e\xb7\xeb\xba\x77\x4b\x8c\xbf\x3a\x00\x00\xef\x8a\x6a\x51\xf4\x0e\x68\x02\x74\x17\xac\x03\x4e\xf6\xac\x7e\x41\xca\xd5\x77\xbf\x14\xce\x4c\x77\x08\x14\x2f\x50\x04\x40\x66\xca\xc1\xc1\xdd\x78\x05\x46\x49\x14\x05\x61\x62\x5a\xc0\x52\x8c\x68\x95\x18\x46\x9c\x0a\x95\x51\x33\x47\x78\x0a\x22\x33\x71\x57\x7d\x6a\x96\xad\x1b\x5b\x9c\x64\x74\x2e\x76\xa2\xc4\xe6\x52\xf0\xbe\xe2\x36\xa0\x89\x67\x51\xa3\x08\x27\x98\x4c\x10\x84\xcd\x33\x80\x8f\x8a\x1c\x4d\x80\x36\x1f\xb1\xd1\xd1\x01\xc5\x82\x71\xad\x22\x92\xbe\x3a\xda\x40\xd9\x35\xd3\xcc\xb5\xee\x59\x35\xc9\x71\x18\xc4\x44\x37\xd2\xe7\x96\xfd\x65\x56\xb4\xf3\xd6\xd3\x60\x92\x1f\x6e\xfb\x96\x45\xe9\x8a\xb1\xb5\x06\x1b\xa8\x3a\xf0\x71\x57\x30\xd6\xa2\x48\x1b\xbf\x3a\x2d\xbf\x55\x9b\xd1\x06\xfc\x04\x16\x59\xcf\x93\x0f\x08\x26\x3a\xb8\xe2\xe3\x5c\x97\x4e\x4c\x37\xef\xd0\xb5\x6a\xef\x3e\x84\xb2\x48\xfd\x96\x41\x9e\x85\x7a\x8a\x4f\xa1\x08\x3a\x7b\x01\x6b\x04\x61\x31\x57\x04\xc9\x8c\xf0\xa0\xcc\x75\x9f\xb6\xf6\xdd\xeb\x5c\xde\x1f\x87\xe1\x75\x53\xb5\xe9\x38\x0c\x81\xac\x09\x33\x89\x1e\xf7\x87\xc3\xf7\xb5\xe7\xaf\x70\xeb\x55\x94\xf0\x15\xf5\x93\xb7\xa5\xdd\x3a\x2c\x89\x2b\xff\x2b\xfe\x2b\xfd\x8a\x8f\x17\x5a\xf7\xbe\x90\x1b\xb3\xb4\x0a\x16\x72\xb8\x46\x28\x7c\xd6\x5c\x6b\x30\x62\xbd\x07\x13\x84\x40\x72\x2a\xc7\x8a\xae\xf2\x8d\x73\x5c\xf8\x7f\xc3\x1e\x76\xbb\x5d\xbf\x76\xb9\xaa\x15\x15\xe2\x55\x44\x67\x64\x04\x2f\xcf\xeb\x18\xbf\x72\x50\xb2\xd9\xb4\x18\x18\x5d\x22\x1f\xeb\x69\x53\xb2\xdb\x7f\x1b\x79\x3b\xbc\xed\xfa\xae\x7b\x97\xb8\xa4\xf6\xa2\xc0\xf5\x2f\x3a\xbd\x64\xd9\xff\x58\x6f\xe2\x86\x2c\x9e\xe2\xa9\xff\x66\xd7\x22\x69\x59\x72\xf4\xfa\x38\x41\x9f\xf2\x18\xbc\xed\xbb\x3f\x01\x00\x00\xff\xff\xea\x07\xe0\x07\xdd\x03\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/default-config.toml"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
