// Code generated by vfsgen; DO NOT EDIT.

// +build !gen

package data

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// Assets statically implements the virtual filesystem provided to vfsgen.
var Assets = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2019, 10, 31, 12, 7, 7, 126445573, time.UTC),
		},
		"/default-config.toml": &vfsgen۰CompressedFileInfo{
			name:             "default-config.toml",
			modTime:          time.Date(2019, 10, 31, 14, 5, 4, 778004453, time.UTC),
			uncompressedSize: 1099,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x53\x41\x8e\xe3\x38\x0c\xbc\xfb\x15\x84\x73\xd9\xbd\xc4\xee\xdd\xc6\x22\x1b\x20\x2f\x69\x0c\x0c\x59\xa2\x63\x75\x64\x51\x43\x51\x71\xe7\xf7\x03\x49\x76\x8f\x0f\x73\x25\x8b\xc5\xaa\x12\xe5\xe8\x3e\x38\x7c\xa2\x83\x1b\xb4\xd6\x4f\xd4\x36\xb9\x34\x11\x2f\x4a\x72\x4d\xf0\x4b\x5a\x38\x01\x25\x09\x49\xc0\xd1\x1d\xb6\xe6\x5f\x2f\x4a\xa0\x95\x87\x14\x11\x32\x0c\x88\xe1\x33\x92\xff\xbb\x59\xe3\x10\x88\xf3\xfc\xff\x7d\xdf\x37\x7a\x46\xfd\x18\x52\x30\x4a\x30\xc2\x0d\x84\x13\x36\x2a\x09\x0d\x86\x56\xef\x48\x99\x43\x73\x52\x2e\x22\xc0\x09\xec\x54\x80\x10\x91\x9f\x56\x23\xac\xd6\x39\xd8\x07\xa0\x0e\x80\xf2\x06\xf0\xcb\x4a\xd3\x7c\x68\x62\xfc\xd1\x00\x00\x58\x93\x95\x67\xd5\xd6\x00\x4d\x80\xe6\x8e\xa5\xc1\x41\x0f\x62\x17\xa4\x54\xbc\xbd\x2d\x19\x33\xd3\x0a\x8e\xfc\x1d\x32\x01\xc4\x99\x92\x33\xb0\x2a\x2b\xc0\x18\x03\xf9\x88\x30\x31\x2d\xa0\xc9\x7b\xd4\x42\x0c\x23\x4e\x19\xca\x28\x89\x3d\xec\x84\xc8\x4c\xdc\x94\x3d\x45\xcb\xd9\x8c\x55\x4e\x50\x32\xe7\x75\x51\x88\xd5\x3d\xd7\xdb\x52\xd7\x0e\x95\x1f\xa2\x64\x1f\xbb\xef\xd3\x2e\xc0\x7a\x41\xf6\xca\x41\xed\x8f\x58\xe1\x68\x80\x7c\xae\x71\x89\xdb\x93\x1c\x37\x6a\x47\xc9\xd4\xa5\x89\xcb\x93\xce\x22\x21\x5e\xbb\x2e\x2a\x6f\x46\xfa\x3a\xb3\xbd\xcf\x82\x7a\x3e\x5b\xea\x54\xb0\xdd\xf3\xad\x6a\x11\x7a\xa0\xaf\xa9\xc1\x09\x0a\x0f\x7c\xae\x02\x4a\x6b\x8c\xb1\xb6\x8f\x9b\x96\x9f\x22\x75\x51\x79\x28\x8d\x2c\xc3\x64\x5d\x7d\x90\x07\xbe\x86\x62\x3a\x30\x3d\xad\x41\x53\xa3\x2d\x0f\x38\x62\xbd\x17\x17\xf7\x40\x2d\xf9\x9d\xc8\x83\xcc\x36\x82\x56\x11\x61\x51\x0f\x84\x98\x18\xe1\x45\x89\x8b\x9f\x6a\x7b\xb5\x32\xe7\xf9\x6b\xd7\x1d\x9d\xd6\xca\x1f\x7c\x5e\x2f\x97\xcb\xbf\x5b\xe2\xdf\x32\xb7\xfb\xc8\x36\x4a\xd5\x4e\x56\xe7\x9c\x4b\x33\x6b\x2f\xf8\x6f\x23\x47\xf8\x03\x5f\x07\x58\xf3\xb1\x90\x19\x53\xac\x61\x2c\x64\x0a\xb7\xe8\x90\xf1\x2c\xa9\x04\xa2\xa2\xb6\x16\x94\x8b\x04\x31\x85\xfc\x35\xd0\x14\xbc\x32\x86\x33\xde\x91\x56\x6e\xa6\x28\xd7\x4b\xdf\xf7\xed\x96\xea\xc6\x96\x59\x88\x37\x12\x99\x91\x11\x6c\xdc\xef\x64\xfc\xd6\x41\x41\x27\x55\x65\xa0\x37\x81\xac\x2f\x47\x4e\x41\x9f\x45\x87\x6b\xd7\xfd\x5e\xf2\x7e\x79\xef\xdb\xa6\xf9\x88\x7e\x09\x75\x22\x97\xcb\x9f\xbd\x1d\xb4\xbc\xfd\xb7\x5d\xc7\x13\x39\x5a\xf2\xb7\xf6\x1f\xbd\x05\x49\xcb\x92\xbc\x95\xd7\x0d\xda\x90\x46\x67\x75\xdb\xfc\x0a\x00\x00\xff\xff\x6b\x21\xe3\x3f\x4b\x04\x00\x00"),
		},
		"/min-config.toml": &vfsgen۰CompressedFileInfo{
			name:             "min-config.toml",
			modTime:          time.Date(2019, 10, 31, 12, 9, 15, 643824190, time.UTC),
			uncompressedSize: 195,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\xcd\x41\x0e\xc2\x20\x10\x85\xe1\x7d\x4f\xf1\xd2\xee\xbd\x81\x27\x31\xa6\x21\xc3\x43\x91\x2a\xda\x8e\x31\xbd\xbd\x61\x26\x26\xb8\x03\xfe\xef\x85\x93\xd4\x95\xe7\x01\x00\x72\xc4\x11\xe3\x88\xa9\x9d\x6a\x02\xe3\x85\x83\x15\x43\x07\x59\xea\x3b\x3a\xd5\x5a\xf8\x70\x8d\x09\x16\x70\xfb\x28\x82\x08\xb7\xcd\x73\x3f\xbd\xbf\x54\x7d\x29\x5c\x75\x4e\x79\xe1\xef\xaf\x96\xec\x35\xa7\x2c\x41\x09\x8b\xcf\xa0\x57\xf3\x85\xfb\xdc\x2e\x7f\xbc\x70\xef\xd8\x37\x00\x00\xff\xff\x29\x76\x09\xb4\xc3\x00\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/default-config.toml"].(os.FileInfo),
		fs["/min-config.toml"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
