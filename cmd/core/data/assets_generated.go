// Code generated by vfsgen; DO NOT EDIT.

// +build !gen

package data

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// Assets statically implements the virtual filesystem provided to vfsgen.
var Assets = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2020, 4, 15, 14, 1, 39, 744241768, time.UTC),
		},
		"/default-config.toml": &vfsgen۰CompressedFileInfo{
			name:             "default-config.toml",
			modTime:          time.Date(2020, 4, 15, 14, 1, 39, 736241741, time.UTC),
			uncompressedSize: 2231,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x54\x4d\x6f\xdb\x38\x10\xbd\xeb\x57\x0c\xe4\x4b\x02\x04\xb1\x93\x34\x81\xd7\x80\x0f\x59\x34\xd8\xbd\x34\x28\xd6\x7b\x0b\x0a\x81\x26\x47\x16\x63\x89\xc3\xf2\xc3\xae\xfe\xfd\x62\x48\x29\x96\xd3\x1e\xba\x45\x73\x89\x39\x1f\xef\x3d\xbe\x19\xb1\xa5\x5d\xd5\xe2\x01\x5b\x58\x43\xa9\x4d\x4d\x65\xc1\xa1\x9a\x5c\x27\x02\xc7\x02\x7e\x0b\x25\xcc\x80\x62\xb0\x31\x40\x4b\x3b\x18\x92\x17\x3d\x45\x90\xc2\x40\xf4\x08\x5c\x06\xe4\xe0\xd5\x93\xb9\x2c\x8e\xbe\xb2\xe4\xb8\xff\x8f\xc5\x62\x51\xc8\x06\xe5\xbe\x8a\x56\x89\x80\x1e\xd6\x10\x5c\xc4\x42\xc4\x40\x95\xa2\xa3\x69\x49\xa8\x49\xb2\x16\xad\x47\x80\x19\xe8\x3a\x15\x82\x47\x77\xd0\x12\xe1\xa8\xdb\x16\xc6\x06\xc8\x0d\x20\x8c\x02\xfc\xa6\x43\x51\xbc\x48\x72\xf8\xa5\x00\x00\xd0\x8a\x95\xb3\x6a\xad\x80\x6a\x40\xb5\xc3\x94\x70\x56\x56\x41\x77\x48\x31\xdd\xed\xa6\xe3\x9a\x86\x8e\xd0\x92\xd9\x01\x03\x80\x6f\x28\xb6\x0a\x8e\x42\x07\x70\xe8\x2d\x19\x8f\x50\x3b\xea\x40\x92\x31\x28\x03\x39\xd8\x62\xcd\xa5\x0e\x43\x74\x06\x46\x40\x74\x8e\x5c\x91\x78\x92\x96\x6b\xb5\xcd\x72\xac\x08\x0d\xd3\xf9\x40\x4e\xec\x38\x5e\xa6\xb8\x6c\x51\x98\xca\x07\xbe\xc7\x78\xef\xd9\x28\x40\x9b\x80\xce\x88\x16\x72\x7e\x8b\xb9\x1c\x15\x90\xe1\x98\x4b\x76\x1b\x0a\x53\x46\xd9\x52\x54\x99\x34\xba\x34\xd2\x26\x04\xeb\x57\xf3\xb9\xc2\xc3\xb5\xd3\xbb\x26\xa0\x6c\xae\x35\xcd\x85\xd5\xf3\xc3\x4d\xd6\x31\x83\xd4\x07\xaf\xc7\x00\x42\x4a\xf4\x1e\x02\xed\xd1\x0c\xc9\x4e\x1b\xdd\xb1\x10\x49\xf6\xcd\x9f\x6d\x36\x74\x36\xd4\xfc\xf5\xf4\x2f\x74\xa4\xb0\xf5\xf3\x95\x56\x93\x20\x6d\x5f\x51\x86\x53\x34\x01\xa7\xe9\x4c\x75\x77\x5f\x43\xf8\x32\x74\xe9\x1a\x24\xba\x50\xd5\xba\xcd\xe3\xdd\x63\x5f\x25\x0b\xad\xa3\x83\x56\xa8\xf2\xa0\xd2\x3a\x6c\x31\x6f\x5f\xeb\xc7\xf1\x68\x1a\x75\x6b\x03\xa1\xd1\x1e\xa4\xf0\x08\x9d\xd8\x23\xf8\xe8\x10\x7a\x8a\x2e\xb9\x93\x4d\x3c\xea\xd0\x70\xff\x6a\x3e\x9f\xfa\x96\x23\xef\x5c\x5b\x2d\x97\xcb\xbb\x61\x76\x6f\x12\x87\x4d\xe3\x2b\xa4\xa8\xae\xb5\xe4\x89\xa5\x24\xeb\x4e\xf5\x6f\x97\x98\x96\xef\xb1\x9f\x94\x15\x2f\x1d\xa9\x6d\xf4\xd9\x08\x76\x33\x09\x91\x96\xeb\x5d\x88\xc9\x0c\xe1\xa5\xd6\x20\x5a\x4f\xe0\xa3\xe5\x8f\x0c\xb3\xb1\x42\x29\xc7\xf5\x2d\x49\xd1\x36\xe4\xc3\x6a\xb9\x58\x2c\xca\xc1\xd1\x01\x8d\x51\xc8\x0d\x20\xa1\x41\x87\xa0\xfd\x69\xa4\xa3\x0e\xb2\x32\x8a\x2c\x03\x8d\xb2\xa4\x4d\xfa\x5c\xc8\xca\xeb\x20\xed\x6a\x3e\x3f\x91\x7c\x58\x7e\x58\x94\x43\xa5\x74\xbd\x65\xff\xb9\xf6\x4f\xe1\xb5\xbc\xbd\x7f\xd8\x34\xe2\xf6\xfe\xa1\x4c\x03\x71\xf8\x35\x6a\x87\x8a\x1f\x90\xb1\x1c\x55\xfa\xbe\xd1\x79\x20\xd3\xf6\x57\x67\x9d\xe5\xe4\xf8\xf6\xfb\xe6\x76\xf9\x8f\x17\x37\xf7\xe5\x3b\x03\x46\xc3\x36\x7a\x67\x1e\x8d\x7a\xca\xf8\xcc\x9c\xff\x7e\x96\xff\x99\x0c\x32\x19\xe3\x8c\xff\xa7\x78\xe7\xac\xb9\xb9\xe2\xc1\x33\x39\xff\xbf\xb6\xd8\x95\xff\x93\x35\xad\x46\x20\xe0\xde\xe9\x16\x4d\x39\x78\x5b\xd6\x50\xee\xb1\x3f\x63\xf8\x35\x8e\x3d\xf6\x45\xf1\xe2\x4d\x67\xf3\x9c\x79\x98\xe9\xcd\x5e\x4f\x36\xe8\xe6\x61\x78\x21\x24\x75\x5d\x34\x3a\xf4\xeb\xd2\xc6\x6d\xab\xe5\x84\x3d\xbd\x1f\x63\x1e\x7c\x70\xda\xec\xae\xce\x15\x1d\x6e\x65\xd2\x90\xb0\x58\x91\x26\xb3\x2e\x6f\xcf\x51\x46\xac\x21\xcf\xef\xf6\xe6\xf9\xd3\x67\xb8\x48\x85\xe4\xa0\xbc\x2b\x2f\xcf\x26\x2d\x62\x68\x3e\x3b\x7d\x28\xdf\x21\xa4\x3c\x3f\xfb\xa7\x8d\xbc\x38\x15\x5f\xe5\xc6\x67\x1a\x4f\xcf\x34\x39\x5f\xbe\x97\x7e\x77\x52\xce\x65\x95\x75\x14\x48\x52\x7a\x24\x3e\x7d\xbc\x9f\xee\x57\x3e\xf3\x57\x5a\x6e\xfe\x7e\x9c\x6c\xca\x8f\x31\xe1\x42\xd7\x60\x90\xdf\x5b\xe1\xfa\xcb\x13\xc5\x30\xe8\xef\xdd\x99\xfd\x34\x8e\x75\xfa\x70\x26\xf5\xe3\xd3\xe6\x4c\x6a\x3a\x27\xa9\x8f\xfc\xeb\x17\xa4\x26\x8a\xdf\x20\xd5\xa3\x8c\x4e\x87\xbe\x32\xa2\xc3\xef\xc0\x7e\x8c\x53\xfc\x17\x00\x00\xff\xff\xdb\xd6\xd7\x60\xb7\x08\x00\x00"),
		},
		"/min-config.toml": &vfsgen۰CompressedFileInfo{
			name:             "min-config.toml",
			modTime:          time.Date(2020, 3, 23, 10, 28, 5, 111560978, time.UTC),
			uncompressedSize: 277,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8e\x41\x6e\x83\x30\x10\x45\xf7\x9c\xe2\x0b\xf6\xed\xbe\x52\x97\x55\x2f\xd0\x5d\x15\x21\x33\x1e\x82\xc1\x66\x08\x1e\x14\x71\xfb\x88\x81\x28\x64\xe7\xf9\xef\xc9\x7a\xff\x24\x33\x5f\x0a\x00\x08\x1e\xdf\x28\x4b\x54\xdb\x4b\x5a\xb0\xbf\x72\x61\xc4\xa4\x0f\x8a\xb2\xf8\x5d\xad\x60\x07\xfa\xbb\xc2\x11\x71\xce\x50\x19\x78\x3c\x60\x0a\x63\x48\x2e\x22\x93\x4c\x8c\xdc\xc9\x12\x3d\x1a\xde\xe9\xe1\xfc\xfe\xfc\x21\x89\xe7\x98\x3f\xbf\x82\x3f\x8d\xd2\xf4\x4c\xfa\x5a\xed\x63\x2b\x3b\xc7\xa4\x9b\xea\xde\x42\x3c\x6b\xdd\x86\xc8\xcf\xfa\x0d\xd9\x1a\xda\x40\x4e\x19\x06\x27\xa7\x9d\xf9\x03\xaf\xf5\x76\xbc\xe9\x03\xaf\x27\xed\x11\x00\x00\xff\xff\x82\x50\x5c\x86\x15\x01\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/default-config.toml"].(os.FileInfo),
		fs["/min-config.toml"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
