// Code generated by vfsgen; DO NOT EDIT.

// +build !gen

package data

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// Assets statically implements the virtual filesystem provided to vfsgen.
var Assets = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2019, 10, 31, 12, 7, 7, 126445573, time.UTC),
		},
		"/default-config.toml": &vfsgen۰CompressedFileInfo{
			name:             "default-config.toml",
			modTime:          time.Date(2019, 10, 31, 12, 11, 11, 13983003, time.UTC),
			uncompressedSize: 999,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x53\xcd\x8e\xe3\x36\x0c\xbe\xfb\x29\x08\xe7\xd2\x5e\x62\x4f\x3b\x28\xd2\x00\x79\x92\xc1\x22\x90\x25\x3a\xd6\x44\x16\xb5\x24\x95\x4c\xde\x7e\x21\xc9\x99\xcd\x61\xaf\xe4\xa7\xef\xcf\x74\xa0\xcb\x39\xe0\x0d\x03\x9c\xa0\xf7\x71\xa6\xbe\x2b\xa3\x99\x78\x35\x5a\x66\x8a\x5f\xda\xc3\x0e\x28\x6b\xca\x0a\x81\x2e\xb0\x2d\xff\x7a\x50\x06\x6b\x22\x64\x41\x28\x30\x20\x86\x4f\xa1\xf8\x77\x77\x97\x73\x22\x2e\xef\xff\x1f\xc7\xb1\xeb\x3e\x2c\x31\xfe\xe8\x00\x00\xbc\x2b\xac\x85\xd1\x3b\xa0\x19\xd0\x5d\xb0\x2e\x38\xd9\xb3\xfa\x15\x29\x57\xdd\xb7\xb5\x60\x16\xba\x43\xa0\x78\x81\x42\x00\xb2\x50\x0e\x0e\xee\xc6\x2b\x30\x4a\xa2\x28\x08\x33\xd3\x0a\x96\x62\x44\xab\xc4\x30\xe1\x5c\xa0\x8c\x9a\x39\xc2\x93\x10\x99\x89\xbb\xaa\x53\xbd\xec\xdd\xd4\xec\x24\xa3\x4b\x91\x13\x25\x36\x97\x32\xef\xeb\xdc\x06\x34\xf1\x2c\x6a\x14\xe1\x04\xb3\x09\x82\xb0\x7b\x1a\xf0\x51\x91\xa3\x09\xd0\xf6\x13\x36\x38\x3a\xa0\x58\x66\x5c\xab\x88\xa4\xaf\x8a\x36\x50\x76\x4d\x34\x73\xad\x7b\x51\x4d\x72\x1c\x06\x31\xd1\x4d\xf4\xb5\x67\x7f\x59\x14\xed\xb2\xf7\x34\x98\xe4\x87\xdb\x5b\xf3\xa2\x74\xc5\xd8\x5a\x83\x1d\x54\x1e\xf8\xbc\x2b\x18\x6b\x51\xa4\xad\x5f\x95\xd6\x9f\xaa\x4d\x68\x07\x7e\x06\x8b\xac\xe7\xd9\x07\x04\x13\x1d\x5c\xf1\x71\xae\xa1\x13\xd3\xcd\x3b\x74\xad\xda\xbb\x0f\xa1\x04\xa9\xdf\x32\xc8\xb3\x50\x4f\xf1\x49\x14\x41\x17\x2f\x60\x8d\x20\xac\xe6\x8a\x20\x99\x11\x1e\x94\xb9\xe6\x69\xb1\xef\x5e\x97\xf2\xfe\x38\x0c\xaf\x49\xdb\xe4\x0f\x39\x8f\x87\xc3\xe1\xdf\xad\xf1\x6f\x9b\xdb\x7d\x94\x18\x75\xea\x67\x6f\x4b\xcf\x75\x59\xbc\x57\xfc\x77\x90\x57\xf8\x15\x1f\x2f\xb0\xee\x63\x25\x37\x65\x69\x65\xac\xe4\x2a\xb7\xda\x54\xf0\xac\xb9\x16\x62\xc4\x7a\x0f\x26\x08\x81\xe4\x54\xce\x16\x5d\xc5\x1b\xe7\xb8\xe0\x03\x59\x13\x16\x12\x3d\x1e\xc6\x71\xec\xb7\x56\x37\xb6\xc2\x42\xbc\x91\xe8\x82\x8c\xe0\xe5\x79\x27\xd3\xb7\x0f\x4a\x36\x9b\x66\x03\xa3\x4b\xe4\x63\x3d\x72\x4a\x76\xaf\x36\x1d\x87\xe1\xb7\xc8\xfb\xe1\x7d\xec\xbb\xee\x43\xe2\x9a\xda\x8b\x32\xae\xff\xd3\xe9\xc5\xcb\xdb\x7f\xdb\x75\xdc\x90\xc5\x53\x3c\xf5\xff\xd8\xad\x48\x5a\xd7\x1c\xbd\x3e\x4e\xd0\xa7\x3c\x05\x6f\xfb\xee\x57\x00\x00\x00\xff\xff\xd1\x50\x31\x5f\xe7\x03\x00\x00"),
		},
		"/min-config.toml": &vfsgen۰CompressedFileInfo{
			name:             "min-config.toml",
			modTime:          time.Date(2019, 10, 31, 12, 9, 15, 643824190, time.UTC),
			uncompressedSize: 195,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\xcd\x41\x0e\xc2\x20\x10\x85\xe1\x7d\x4f\xf1\xd2\xee\xbd\x81\x27\x31\xa6\x21\xc3\x43\x91\x2a\xda\x8e\x31\xbd\xbd\x61\x26\x26\xb8\x03\xfe\xef\x85\x93\xd4\x95\xe7\x01\x00\x72\xc4\x11\xe3\x88\xa9\x9d\x6a\x02\xe3\x85\x83\x15\x43\x07\x59\xea\x3b\x3a\xd5\x5a\xf8\x70\x8d\x09\x16\x70\xfb\x28\x82\x08\xb7\xcd\x73\x3f\xbd\xbf\x54\x7d\x29\x5c\x75\x4e\x79\xe1\xef\xaf\x96\xec\x35\xa7\x2c\x41\x09\x8b\xcf\xa0\x57\xf3\x85\xfb\xdc\x2e\x7f\xbc\x70\xef\xd8\x37\x00\x00\xff\xff\x29\x76\x09\xb4\xc3\x00\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/default-config.toml"].(os.FileInfo),
		fs["/min-config.toml"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
